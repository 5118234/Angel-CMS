@using Angelo.Connect.SlideShow.Models
@using Angelo.Connect.Abstractions
@using System.Text.RegularExpressions

@inject IDocumentService<Slide> _slideService

@model SlideShowWidget
@{
    var slideshowId = $"angelo_slideshow_{Model.Id}";
    var videoSource = new VideoSource();
    var slides = _slideService.Query()
        .Where(x => x.WidgetId == Model.Id)
        .OrderBy(x => x.Position).ToArray();
    if (slides.Length == 0)
    {
        slides = CreateDefaultSlides().ToArray();
    }
    var controlId = "slideshowlux-" + Model.Id.Replace("-", "") + "-" + Model.SiteId.Replace("-", "");

    //TODO move these default to object creating default service
    if (string.IsNullOrEmpty(Model.Height))
    {
        Model.Height = "100%";
    }
    if ((Model.Duration == 0))
    {
        Model.Duration = 9000;
    }
    var mainTransition = (Model.Transition == Transition.Fade ? "carousel-fade" : string.Empty);
}

<link rel="stylesheet" href="assets/slideshow/css/animate.css">

<div id="@slideshowId" class="carousel slide @mainTransition">
    <!-- Indicators -->
    <ol class="carousel-indicators">
        @if (slides.Length > 1)
        {
            for (var i = 0; i < slides.Length; i++)
            {
            <li data-target="#@slideshowId" data-slide-to="@i" class='@(i == 0 ? "active" : string.Empty)'></li>
            }
        }
    </ol>

    <!-- Wrapper for slides -->
    <div class="carousel-inner fadeInUp" role="listbox" style="height: @Model.Height ;">
        @for (var i = 0; i < slides.Length; i++)
        {
            var slide = slides[i];
            var topleft = string.Empty;
            var topcenter = string.Empty;
            var topright = string.Empty;
            var middleleft = string.Empty;
            var middlecenter = string.Empty;
            var middleright = string.Empty;
            var bottomleft = string.Empty;
            var bottomcenter = string.Empty;
            var bottomright = string.Empty;
            var altText = string.Empty;
            var jwPlayerId = string.Empty;

            if (string.IsNullOrEmpty(slide.Description))
            {
                altText = slide.Title;
            }
            else
            {
                altText = slide.Description;
            }

            <!-- slide -->
            <div class="item @(i == 0 ? "active" : string.Empty) customSlideShowBackground animated" style="@(string.IsNullOrEmpty(slide.Color) ? string.Empty : "background-color:" + slide.Color)">

                @{
                    if (slide.UseVideoBackground && slide.VideoSource == videoSource.YouTube)
                    {
                        jwPlayerId = $"jwPlayer_{slideshowId}_{slide.DocumentId}";
                        <div id="@jwPlayerId"></div>
                        <div class="slideshow_video_layer" 
                            style="position: absolute;
			                    top: 0;
			                    bottom: 0;
			                    left: 0;
			                    width: 100%;
			                    height: 100%;
			                    font-size: 20px;
			                    color: #fff;
			                    text-align: center;
			                    text-shadow: 0 1px 2px rgba(0,0,0,.6);
			                    filter: alpha(opacity=50);
			                    opacity: .1;
			                    background-repeat: repeat;"> 
			                
                        </div>
                    }
                    else if (slide.UseVideoBackground && slide.VideoSource == videoSource.Vimeo)
                    {
                        <div class="embed-responsive embed-responsive-16by9">
                            <iframe src="@slide.VideoUrl?background=1&autoplay=1&muted=@(slide.EnableVideoSound ? "0": "1")" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
                        </div>
                    }
                    else
                    {
                        <img src="@slide.ImageUrl" class="img-responsive" alt="@altText" />
                    }
                 }

                <div class="carousel-caption">
                    @foreach (var layer in slide.Layers)
                    {
                        var layerOutput = string.Empty;
                        var layerStyle = string.Empty;

                        if (!string.IsNullOrEmpty(layer.Color))
                        {
                            layerStyle += $"color:{layer.Color};";
                        }
                        if (!string.IsNullOrEmpty(layer.FontFamily))
                        {
                            layerStyle += $"font-family:{layer.FontFamily};";
                        }
                        if (layer.FontSize > 0)
                        {
                            layerStyle += $"font-size:{layer.FontSize.ToString()}px;";
                        }
                        if (!string.IsNullOrEmpty(layer.FontWeight))
                        {
                            layerStyle += $"font-weight:{layer.FontWeight.ToString()};";
                        }
                        if (!string.IsNullOrEmpty(layer.FontStyle))
                        {
                            layerStyle += $"font-style:{layer.FontStyle.ToString()};";
                        }
                        if (!string.IsNullOrEmpty(layer.TextDecoration))
                        {
                            layerStyle += $"text-decoration:{layer.TextDecoration.ToString()};";
                        }
                        if (!string.IsNullOrEmpty(layer.BgColor))
                        {
                            layerStyle += $"background-color:{layer.BgColor.ToString()};";
                        }

                        switch (layer.HorizontalAlignment)
                        {
                            case Alignment.Left:
                                layerStyle += $"text-align:left;";
                                break;
                            case Alignment.Center:
                                layerStyle += $"text-align:center;";
                                break;
                            case Alignment.Right:
                                layerStyle += $"text-align:right;";
                                break;
                        }

                        switch (layer.LayerType)
                        {
                            case "button":
                                layerOutput = $"<button style='{layerStyle}' onclick='window.open(&quot;{layer.SourceUrl}&quot;,&quot;{layer.Target}&quot;)' class='btn btn-primary {layer.Delay}' data-animation='animated {layer.Transition}'>{layer.Title}</button>";
                                break;
                            default:
                                layerOutput = $"<h3 class='{layer.Delay}' style='{layerStyle}' data-animation='animated {layer.Transition}'>{layer.Title}</h3>";
                                break;
                        }

                        switch (layer.Position)
                        {
                            case "TopLeft":
                                topleft += layerOutput;
                                break;
                            case "TopCenter":
                                topcenter += layerOutput;
                                break;
                            case "TopRight":
                                topright += layerOutput;
                                break;
                            case "MiddleLeft":
                                middleleft += layerOutput;
                                break;
                            case "MiddleCenter":
                                middlecenter += layerOutput;
                                break;
                            case "MiddleRight":
                                middleright += layerOutput;
                                break;
                            case "BottomLeft":
                                bottomleft += layerOutput;
                                break;
                            case "BottomCenter":
                                bottomcenter += layerOutput;
                                break;
                            case "BottomRight":
                                bottomright += layerOutput;
                                break;
                            default:
                                break;
                        }
                    }

                    <div class="row" style="height:100%;">
                        <div class="col-md-12" style="height:100%;">
                            <div class="row" style="height:auto">
                                <div class="col-md-4">@Html.Raw(topleft)</div>
                                <div class="col-md-4">@Html.Raw(topcenter)</div>
                                <div class="col-md-4">@Html.Raw(topright)</div>
                            </div>
                            <div class="row" style="height:auto">
                                <div class="col-md-4">@Html.Raw(middleleft)</div>
                                <div class="col-md-4">@Html.Raw(middlecenter)</div>
                                <div class="col-md-4">@Html.Raw(middleright)</div>
                            </div>
                            <div class="row" style="height:auto">
                                <div class="col-md-4">@Html.Raw(bottomleft)</div>
                                <div class="col-md-4">@Html.Raw(bottomcenter)</div>
                                <div class="col-md-4">@Html.Raw(bottomright)</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /.item -->
            @if (slide.UseVideoBackground)
            {
                <script type="text/javascript">
                    $(document).ready(function() {
                        try {
                            jwplayer("@jwPlayerId").setup({
                                mute: true,
                                volume: 0,
                                hlshtml: true,
                                provider: "video",
                                primary: "html5",
                                title: "Video Player",
                                file: "@slide.VideoUrl",
                                type: "",
                                width: "100%",
                                aspectratio: "16:9",
                                autostart: true,
                                repeat: true,
                                controls: false
                            }).on('ready',
                                function() {
                                    jwplayer("@jwPlayerId").play(true).setMute(true);
                                }).on('setupError',
                                function(err) {
                                    console.log('error setting up video player: ' + err.message);
                                });
                        } catch (err) {
                            console.log("video setup error: " + err.message);
                        }

                        jwplayer("@jwPlayerId").on("play", function() {
                            @if (!slide.EnableVideoSound)
                            {
                                <text>
                                    jwplayer("@jwPlayerId").setVolume(0);
                                </text>
                            }
                        });
                    });
                </script>
            }
        }
    </div>
    <!-- /.carousel-inner -->
    @if(slides.Length > 1)
    {
        <!-- Controls -->
        <a class="left carousel-control" href="#@slideshowId" role="button" data-slide="prev">
            <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="right carousel-control" href="#@slideshowId" role="button" data-slide="next">
            <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    }
</div>
<!-- /.carousel -->


<script type="text/javascript">
    var slideshowID = '@slideshowId';
    var duration = @Model.Duration;

    /* Demo Scripts for Bootstrap Carousel and Animate.css article
    * on SitePoint by Maria Antonietta Perna
    */
    (function ($) {
        $(document).ready(function () {
            //Function to animate slider captions
            function doAnimations(elems) {
                //Cache the animationend event in a variable
                var animEndEv = 'webkitAnimationEnd animationend';

                elems.each(function () {
                    var $this = $(this),
                        $animationType = $this.data('animation');
                    $this.addClass($animationType).one(animEndEv, function () {
                        $this.removeClass($animationType);
                    });
                });
            }

            //Variables on page load
            var $myCarousel = $('#' + slideshowID),
                $firstAnimatingElems = $myCarousel.find('.item:first').find("[data-animation ^= 'animated']");

            //Initialize carousel
            $myCarousel.carousel({
                interval: duration
            });

            //Animate captions in first slide on page load
            doAnimations($firstAnimatingElems);

            //Pause carousel
            // $myCarousel.carousel('pause');

            //Other slides to be animated on carousel slide event
            $myCarousel.on('slide.bs.carousel', function (e) {
                var $animatingElems = $(e.relatedTarget).find("[data-animation ^= 'animated']");
                doAnimations($animatingElems);
            });
        });
    })(jQuery);
</script>

<style type="text/css">
    /* Extra small devices (phones, 600px and down) */
    @@media only screen and (max-width: 600px) {
        .carousel-caption {
            transform: scale(0.40);
        }
    } 

    /* Small devices (phones, 600px and up) */
    @@media only screen and (min-width: 600px) {
        .carousel-caption {
            transform: scale(0.50);
        }
    } 

    /* Medium devices (landscape tablets, 768px and up) */
    @@media only screen and (min-width: 768px) {
        .carousel-caption {
            transform: scale(0.60);
        }
    } 

    /* Large devices (laptops/desktops, 992px and up) */
    @@media only screen and (min-width: 992px) {
        .carousel-caption {
            transform: scale(0.75);
        }
    } 

    @@media only screen and (min-width: 1200px) {
        .carousel-caption {
            transform: unset;
        }
    } 

    .main-container {
      padding: 10px 15px;
    }
    .skyblue {
	    background-color: #22c8ff;
    }
    .deepskyblue {
	    background-color: #00bfff;
    }
    .darkerskyblue {
	    background-color: #00a6dd;
    }
    .customSlideShowBackground{
        background-color: @Model.BackgroundColor
    }
    .customSlideShowHeight{
        max-height: 100px;
    }
    .carousel-indicators {
	    bottom: 0;
    }
    /*.carousel-control.right,
    .carousel-control.left {
	    background-image: none;
    }*/
    .carousel .item {
	    min-height: 100px;
	    height: 100%;
	    width:100%;
    }


    /*.carousel-caption h3,
    .carousel .icon-container,
    .carousel-caption button {
	    background-color: #09c;
    }*/
    .carousel-caption h3 {
        padding: .5em;
    }
    .carousel .icon-container {
	    display: inline-block;
	    font-size: 25px;
	    line-height: 25px;
	    padding: 1em;
	    text-align: center;
	    border-radius: 50%;
    }
    .carousel-caption button {
        /*border-color: #00bfff;*/
        margin-top: 1em;
    }

    .carousel-caption {
        height: 100%;
        width: 100%;
        left: 0;
    }

    /* Animation delays */
    .slideShowDelay0{
        animation-delay: 0s;
    }
    .slideShowDelay1{
        animation-delay: 1s;
    }
    .slideShowDelay2{
        animation-delay: 2s;
    }
    .slideShowDelay3{
        animation-delay: 3s;
    }
    .slideShowDelay4{
        animation-delay: 4s;
    }
    .slideShowDelay5{
        animation-delay: 5s;
    }
    .slideShowDelay6{
        animation-delay: 6s;
    }
    .slideShowDelay7{
        animation-delay: 7s;
    }
    .slideShowDelay8{
        animation-delay: 8s;
    }
    .slideShowDelay9{
        animation-delay: 9s;
    }
    .slideShowDelay10{
        animation-delay: 10s;
    }


    .p {
        padding-top: 125px;
        text-align: center;
    }
    .p a {
        text-decoration: underline;
    }


    .carousel-fade .carousel-inner .item {
      opacity: 0;
      -webkit-transition-property: opacity;
      -moz-transition-property: opacity;
      -o-transition-property: opacity;
      transition-property: opacity;
    }
    .carousel-fade .carousel-inner .active {
      opacity: 1;
    }
    .carousel-fade .carousel-inner .active.left,
    .carousel-fade .carousel-inner .active.right {
      left: 0;
      opacity: 0;
      z-index: 1;
    }
    .carousel-fade .carousel-inner .next.left,
    .carousel-fade .carousel-inner .prev.right {
      opacity: 1;
    }
    .carousel-fade .carousel-control {
      z-index: 11;
    }

    .carousel-inner > .item > img {
        margin: 0 auto;
    }

    .slideshow_video_layer{
		     background: linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.3)),
             height: 100%;
		  
    }
</style>


@functions{
    public static string GetFit(Slide slide)
    {
        var result = string.Empty;
        switch (slide?.BackgroundFit ?? Fit.None)
        {
            case Fit.Contain:
                result = "contain";
                break;
            case Fit.Cover:
                result = "cover";
                break;
            default:
            case Fit.None:
                result = "inherit";
                break;
        }

        return result;
    }

    public static string GetTiling(Slide slide)
    {
        var result = string.Empty;
        switch (slide?.Tiling ?? Tiling.None)
        {
            case Tiling.None:
                result = "none";
                break;
            case Tiling.Horizontal:
                result = "repeat-x";
                break;
            case Tiling.Vertical:
                result = "repeat-y";
                break;
            case Tiling.Both:
                result = "repeat";
                break;
        }

        return result;
    }

    public static bool IsSlideVisible(Slide slide)
    {
        if (slide.State == SlideState.Unpublished) return false;

        var now = DateTime.Now;
        if (slide.VisibleFrom.HasValue && now < slide.VisibleFrom.Value) return false;
        if (slide.VisibleTo.HasValue && now > slide.VisibleTo.Value) return false;

        return true;
    }
    public static string GetLinkTarget(LinkTarget target)
    {
        var result = string.Empty;
        switch (target)
        {
            case LinkTarget.NewWindow:
                result = "_blank";
                break;
            case LinkTarget.SameWindow:
                result = "_self";
                break;
            default:
                break;
        }
        return result;
    }

    public static IList<Slide> CreateDefaultSlides()
    {
        ICollection<SlideLayer> layers = new List<SlideLayer>();
        layers.Add(new SlideLayer() { Title = "Slideshow Placeholder", LayerType = "text", Position = "TopCenter", Delay = "slideShowDelay1", Transition = "fadeIn" });

        return new[]
        {
            new Slide() { Title = "", ImageUrl = "", BackgroundFit = Fit.Cover, Duration = 4000, Color = "#5494ce",
                Layers= layers
            }
        };
    }
}
