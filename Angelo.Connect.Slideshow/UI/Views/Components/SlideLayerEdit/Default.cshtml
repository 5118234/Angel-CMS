@using Angelo.Connect.SlideShow.Models
@using Angelo.Connect.Abstractions
@using Angelo.Connect.SlideShow.Extensions;

@model SlideLayer
@{
    var transitions = typeof(Transition).GetItemsForEnum();

    //TODO based on layer type choose different partial views.
}

<input type="hidden" asp-for="Id" />
<input type="hidden" asp-for="SlideId" />
<input type="hidden" asp-for="LayerType" />
<input type="hidden" asp-for="FontFamily" />
<input type="hidden" asp-for="FontSize" />
<input type="hidden" asp-for="HorizontalAlignment" />
<input type="hidden" asp-for="Color" />
<input type="hidden" asp-for="BgColor"/>
<input type="hidden" asp-for="FontWeight"/>
<input type="hidden" asp-for="FontStyle" />
<input type="hidden" asp-for="TextDecoration" />



<div class="form-group">
    @Html.Partial("~/UI/Views/Shared/SlideShowNav.cshtml")
</div>
<div class="form-group">
    <input class="form-control" asp-for="Title" placeholder="Caption Text..." spellcheck="true" onkeyup="$('#animationSandbox').html(this.value);" />
</div>

<div class="row">
    <div class="col-sm-12">
        <div id="mytextlayertoolbar"></div>

        @(Html.Kendo().ToolBar()
              .Name("TextLayerToolbar")
              .Items(items =>
              {

                  items.Add().Template("<input id='fontFamily' style='width: 150px;' />").Overflow(ShowInOverflowPopup.Never);
                  items.Add().Type(CommandType.Separator);
                  items.Add().Template("<input id='fontSizes' style='width: 90px;' />").Overflow(ShowInOverflowPopup.Never);
                  items.Add().Type(CommandType.Separator);
                  items.Add().Template("<input id='colorFontPicker' style='width: 90px;' />").Overflow(ShowInOverflowPopup.Never);
                  items.Add().Type(CommandType.Separator);
                  items.Add().Template("<input id='dropdownAlign' style='width: 90px;' />").Overflow(ShowInOverflowPopup.Never);
                  items.Add().Type(CommandType.Separator);
                  items.Add().Type(CommandType.ButtonGroup).Overflow(ShowInOverflowPopup.Always).Buttons(buttons =>
                  {
                      buttons.Add().Togglable(true).Icon("bold").Id("layertoolbarbold").Selected((Model.FontWeight == "bold" ? true : false));
                      buttons.Add().Togglable(true).Icon("italic").Id("layertoolbaritalic").Selected((Model.FontStyle == "italic" ? true : false));
                      buttons.Add().Togglable(true).Icon("underline").Id("layertoolbarunderline").Selected((Model.TextDecoration == "underline" ? true : false));
                  });

              })
              .Events(e => e.Toggle("onToggle"))
              )
    </div>
</div>

<div class="row" style="padding-top: 10px;">
    <div class="col-sm-4">
        <div class="form-group">
            <label for="Position">Position</label>
            @Html.EditorFor(x => x.Position, "SlideShowPosition", nameof(SlideLayer.Position))
        </div>
    </div>

    <div class="col-sm-4">
        <div class="form-group">
            <label for="Transition">Transition</label>
            @Html.EditorFor(x => x.Transition, "SlideShowTransition", nameof(SlideLayer.Transition))
        </div>
    </div>
    
    <div class="col-sm-4">
        <div class="form-group">
            <label for="Transition">Delay (sec)</label>
            @Html.EditorFor(x => x.Delay, "SlideShowDelay", nameof(SlideLayer.Delay))
        </div>
    </div>
</div>

<div class="row">

    <div class="col-sm-12">
        <div class="form-group">
            <label>&nbsp;</label>
            <h3>
                @{
                    var layerStyle = "";
                    if (!string.IsNullOrEmpty(Model.Color))
                    {
                        layerStyle += $"color:{Model.Color};";
                    }
                    if (!string.IsNullOrEmpty(Model.FontFamily))
                    {
                        layerStyle += $"font-family:{Model.FontFamily};";
                    }
                    if (Model.FontSize > 0)
                    {
                        layerStyle += $"font-size:{Model.FontSize.ToString()}px;";
                    }
                    if (!string.IsNullOrEmpty(Model.FontWeight))
                    {
                        layerStyle += $"font-weight:{Model.FontWeight.ToString()};";
                    }
                    if (!string.IsNullOrEmpty(Model.FontStyle))
                    {
                        layerStyle += $"font-style:{Model.FontStyle.ToString()};";
                    }
                    if (!string.IsNullOrEmpty(Model.TextDecoration))
                    {
                        layerStyle += $"text-decoration:{Model.TextDecoration.ToString()};";
                    }
                    if (!string.IsNullOrEmpty(Model.BgColor))
                    {
                        layerStyle += $"background-color:{Model.BgColor.ToString()};";
                    }

                }
                <span id="animationSandbox" style="display:block; font-size:2rem;text-align:center;@layerStyle">

                    @(!string.IsNullOrEmpty(Model.Title) ? Model.Title : "Preview text")
                </span>
            </h3>

        </div>

    </div>
</div>


<div class="form-group">
    <label>&nbsp;</label>
    <a href="#managelayers" onclick="saveLayer(this)" class="slideshowpanel form-control btn btn-primary" level="2" caption="edit slide">Save Layer</a>
</div>


<script>

    $(document).ready(function () {
        var fontSizes = [];
        for (i = 5; i < 65; i++) {
            fontSizes.push({ text: i + " px", value: i + "px" })
        }

        $("#fontSizes").kendoDropDownList({
            dataTextField: "text",
            dataValueField: "value",
            dataSource: fontSizes,
            value: $("#FontSize").val() + "px",
            select: function (e) {

                if (e.dataItem) {
                    var dataItem = e.dataItem;
                    // kendoConsole.log("event :: select (" + dataItem.text + " : " + dataItem.value + ")");
                    $("#animationSandbox").css({ "font-size": dataItem.value });
                    $("#FontSize").val(dataItem.value.replace("px", ""));
                } else {
                    // kendoConsole.log("event :: select");
                }

            }
        });

        var fontColorPicker = $("#colorFontPicker").kendoColorPicker({
            toolIcon: "k-i-foreground-color",
            value: $("#Color").val()
        }).data("kendoColorPicker");

        fontColorPicker.bind({
            change: function (e) {
                $("#animationSandbox").css({ "color": e.value });
                $("#Color").val(e.value);
            }
        });

        $("#fontFamily").kendoDropDownList({
            optionLabel: "Fonts",
            dataTextField: "text",
            dataValueField: "value",
            value: $("#FontFamily").val(),
            dataSource: [
                { text: "Arial", value: "Arial" },
                { text: "Courier New", value: "Courier New" },
                { text: "Georgia", value: "Georgia" },
                { text: "Impact", value: "Impact" },
                { text: "Lucida Console", value: "Lucida Console" },
                { text: "Tahoma", value: "Tahoma" },
                { text: "Times New Roman", value: "Times New Roman" },
                { text: "Trebuchet MS", value: "Trebuchet MS" },
                { text: "Verdana", value: "Verdana" }
            ],
            select: function (e) {

                if (e.dataItem) {
                    var dataItem = e.dataItem;
                    // kendoConsole.log("event :: select (" + dataItem.text + " : " + dataItem.value + ")");
                    $("#animationSandbox").css({ "font-family": dataItem.value });
                    $("#FontFamily").val(dataItem.value);
                } else {
                    // kendoConsole.log("event :: select");
                }

            }
        });

        var alignment = "";
        if ($("#HorizontalAlignment").val() === 1) {
            alignment = "left";
        }
        if ($("#HorizontalAlignment").val() === 2) {
            alignment = "center";
        }
        if ($("#HorizontalAlignment").val() === 3) {
            alignment = "right";
        }

        $("#dropdownAlign").kendoDropDownList({
            optionLabel: "Align",
            dataTextField: "text",
            dataValueField: "value",
            value: alignment,
            template: '<span class="k-icon k-i-align-#: data.value #"></span>' +
                '<span class="k-state-default">#: data.text #</span>',
            valueTemplate: '<span class="k-icon k-i-align-#: data.value #"></span>',
            dataSource: [
                { text: "Left", value: "left" },
                { text: "Center", value: "center" },
                { text: "Right", value: "right" }

            ],
            select: function (e) {

                if (e.dataItem) {
                    var dataItem = e.dataItem;
                    var alignmentVal = 0;
                    if (dataItem.value === "left") {
                        alignmentVal = 1;
                    }else if (dataItem.value === "center") {
                        alignmentVal = 2;
                    }else if (dataItem.value === "right") {
                        alignmentVal = 3;
                    }
                    // kendoConsole.log("event :: select (" + dataItem.text + " : " + dataItem.value + ")");
                    $("#animationSandbox").css({ "text-align": dataItem.value });
                    $("#HorizontalAlignment").val(alignmentVal);
                    
                } else {
                    // kendoConsole.log("event :: select");
                }

            }
        });


    });

   
 
    function onToggle(e) {
      
        switch (e.id) {
            case "layertoolbarbold":
                $("#animationSandbox").css({ "font-weight": (e.checked ? "bold" : "normal") });
                $("#FontWeight").val((e.checked ? "bold" : "normal"));
                break;
            case "layertoolbaritalic":
                $("#animationSandbox").css({ "font-style": (e.checked ? "italic" : "normal") });
                $("#FontStyle").val((e.checked ? "italic" : "normal"));
                break;
            case "layertoolbarunderline":
                $("#animationSandbox").css({ "text-decoration": (e.checked ? "underline" : "inherit") });
                $("#TextDecoration").val((e.checked ? "underline" : "inherit"));
                break;
            
            default:

        }
    }

   

    // Or use the global event system

    $.on("transition.change", function (event, data) {
        var animation = data.animation;

        $("#animationSandbox").removeClass().addClass(animation + ' animated').one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {
            $(this).removeClass();
        });
    });
</script>